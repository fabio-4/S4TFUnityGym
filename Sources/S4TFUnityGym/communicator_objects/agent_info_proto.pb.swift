// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mlagents/envs/communicator_objects/agent_info_proto.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct AgentInfoProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stackedVectorObservation: [Float] {
    get {return _storage._stackedVectorObservation}
    set {_uniqueStorage()._stackedVectorObservation = newValue}
  }

  var visualObservations: [Data] {
    get {return _storage._visualObservations}
    set {_uniqueStorage()._visualObservations = newValue}
  }

  var textObservation: String {
    get {return _storage._textObservation}
    set {_uniqueStorage()._textObservation = newValue}
  }

  var storedVectorActions: [Float] {
    get {return _storage._storedVectorActions}
    set {_uniqueStorage()._storedVectorActions = newValue}
  }

  var storedTextActions: String {
    get {return _storage._storedTextActions}
    set {_uniqueStorage()._storedTextActions = newValue}
  }

  var memories: [Float] {
    get {return _storage._memories}
    set {_uniqueStorage()._memories = newValue}
  }

  var reward: Float {
    get {return _storage._reward}
    set {_uniqueStorage()._reward = newValue}
  }

  var done: Bool {
    get {return _storage._done}
    set {_uniqueStorage()._done = newValue}
  }

  var maxStepReached: Bool {
    get {return _storage._maxStepReached}
    set {_uniqueStorage()._maxStepReached = newValue}
  }

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var actionMask: [Bool] {
    get {return _storage._actionMask}
    set {_uniqueStorage()._actionMask = newValue}
  }

  var customObservation: CustomObservation {
    get {return _storage._customObservation ?? CustomObservation()}
    set {_uniqueStorage()._customObservation = newValue}
  }
  /// Returns true if `customObservation` has been explicitly set.
  var hasCustomObservation: Bool {return _storage._customObservation != nil}
  /// Clears the value of `customObservation`. Subsequent reads from it will return its default value.
  mutating func clearCustomObservation() {_uniqueStorage()._customObservation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "communicator_objects"

extension AgentInfoProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AgentInfoProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stacked_vector_observation"),
    2: .standard(proto: "visual_observations"),
    3: .standard(proto: "text_observation"),
    4: .standard(proto: "stored_vector_actions"),
    5: .standard(proto: "stored_text_actions"),
    6: .same(proto: "memories"),
    7: .same(proto: "reward"),
    8: .same(proto: "done"),
    9: .standard(proto: "max_step_reached"),
    10: .same(proto: "id"),
    11: .standard(proto: "action_mask"),
    12: .standard(proto: "custom_observation"),
  ]

  fileprivate class _StorageClass {
    var _stackedVectorObservation: [Float] = []
    var _visualObservations: [Data] = []
    var _textObservation: String = String()
    var _storedVectorActions: [Float] = []
    var _storedTextActions: String = String()
    var _memories: [Float] = []
    var _reward: Float = 0
    var _done: Bool = false
    var _maxStepReached: Bool = false
    var _id: Int32 = 0
    var _actionMask: [Bool] = []
    var _customObservation: CustomObservation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _stackedVectorObservation = source._stackedVectorObservation
      _visualObservations = source._visualObservations
      _textObservation = source._textObservation
      _storedVectorActions = source._storedVectorActions
      _storedTextActions = source._storedTextActions
      _memories = source._memories
      _reward = source._reward
      _done = source._done
      _maxStepReached = source._maxStepReached
      _id = source._id
      _actionMask = source._actionMask
      _customObservation = source._customObservation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedFloatField(value: &_storage._stackedVectorObservation)
        case 2: try decoder.decodeRepeatedBytesField(value: &_storage._visualObservations)
        case 3: try decoder.decodeSingularStringField(value: &_storage._textObservation)
        case 4: try decoder.decodeRepeatedFloatField(value: &_storage._storedVectorActions)
        case 5: try decoder.decodeSingularStringField(value: &_storage._storedTextActions)
        case 6: try decoder.decodeRepeatedFloatField(value: &_storage._memories)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._reward)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._done)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._maxStepReached)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 11: try decoder.decodeRepeatedBoolField(value: &_storage._actionMask)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._customObservation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._stackedVectorObservation.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._stackedVectorObservation, fieldNumber: 1)
      }
      if !_storage._visualObservations.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._visualObservations, fieldNumber: 2)
      }
      if !_storage._textObservation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._textObservation, fieldNumber: 3)
      }
      if !_storage._storedVectorActions.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._storedVectorActions, fieldNumber: 4)
      }
      if !_storage._storedTextActions.isEmpty {
        try visitor.visitSingularStringField(value: _storage._storedTextActions, fieldNumber: 5)
      }
      if !_storage._memories.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._memories, fieldNumber: 6)
      }
      if _storage._reward != 0 {
        try visitor.visitSingularFloatField(value: _storage._reward, fieldNumber: 7)
      }
      if _storage._done != false {
        try visitor.visitSingularBoolField(value: _storage._done, fieldNumber: 8)
      }
      if _storage._maxStepReached != false {
        try visitor.visitSingularBoolField(value: _storage._maxStepReached, fieldNumber: 9)
      }
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 10)
      }
      if !_storage._actionMask.isEmpty {
        try visitor.visitPackedBoolField(value: _storage._actionMask, fieldNumber: 11)
      }
      if let v = _storage._customObservation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AgentInfoProto, rhs: AgentInfoProto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._stackedVectorObservation != rhs_storage._stackedVectorObservation {return false}
        if _storage._visualObservations != rhs_storage._visualObservations {return false}
        if _storage._textObservation != rhs_storage._textObservation {return false}
        if _storage._storedVectorActions != rhs_storage._storedVectorActions {return false}
        if _storage._storedTextActions != rhs_storage._storedTextActions {return false}
        if _storage._memories != rhs_storage._memories {return false}
        if _storage._reward != rhs_storage._reward {return false}
        if _storage._done != rhs_storage._done {return false}
        if _storage._maxStepReached != rhs_storage._maxStepReached {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._actionMask != rhs_storage._actionMask {return false}
        if _storage._customObservation != rhs_storage._customObservation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mlagents/envs/communicator_objects/brain_parameters_proto.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct BrainParametersProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vectorObservationSize: Int32 = 0

  var numStackedVectorObservations: Int32 = 0

  var vectorActionSize: [Int32] = []

  var cameraResolutions: [ResolutionProto] = []

  var vectorActionDescriptions: [String] = []

  var vectorActionSpaceType: SpaceTypeProto = .discrete

  var brainName: String = String()

  var isTraining: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "communicator_objects"

extension BrainParametersProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BrainParametersProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vector_observation_size"),
    2: .standard(proto: "num_stacked_vector_observations"),
    3: .standard(proto: "vector_action_size"),
    4: .standard(proto: "camera_resolutions"),
    5: .standard(proto: "vector_action_descriptions"),
    6: .standard(proto: "vector_action_space_type"),
    7: .standard(proto: "brain_name"),
    8: .standard(proto: "is_training"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.vectorObservationSize)
      case 2: try decoder.decodeSingularInt32Field(value: &self.numStackedVectorObservations)
      case 3: try decoder.decodeRepeatedInt32Field(value: &self.vectorActionSize)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.cameraResolutions)
      case 5: try decoder.decodeRepeatedStringField(value: &self.vectorActionDescriptions)
      case 6: try decoder.decodeSingularEnumField(value: &self.vectorActionSpaceType)
      case 7: try decoder.decodeSingularStringField(value: &self.brainName)
      case 8: try decoder.decodeSingularBoolField(value: &self.isTraining)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.vectorObservationSize != 0 {
      try visitor.visitSingularInt32Field(value: self.vectorObservationSize, fieldNumber: 1)
    }
    if self.numStackedVectorObservations != 0 {
      try visitor.visitSingularInt32Field(value: self.numStackedVectorObservations, fieldNumber: 2)
    }
    if !self.vectorActionSize.isEmpty {
      try visitor.visitPackedInt32Field(value: self.vectorActionSize, fieldNumber: 3)
    }
    if !self.cameraResolutions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cameraResolutions, fieldNumber: 4)
    }
    if !self.vectorActionDescriptions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.vectorActionDescriptions, fieldNumber: 5)
    }
    if self.vectorActionSpaceType != .discrete {
      try visitor.visitSingularEnumField(value: self.vectorActionSpaceType, fieldNumber: 6)
    }
    if !self.brainName.isEmpty {
      try visitor.visitSingularStringField(value: self.brainName, fieldNumber: 7)
    }
    if self.isTraining != false {
      try visitor.visitSingularBoolField(value: self.isTraining, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BrainParametersProto, rhs: BrainParametersProto) -> Bool {
    if lhs.vectorObservationSize != rhs.vectorObservationSize {return false}
    if lhs.numStackedVectorObservations != rhs.numStackedVectorObservations {return false}
    if lhs.vectorActionSize != rhs.vectorActionSize {return false}
    if lhs.cameraResolutions != rhs.cameraResolutions {return false}
    if lhs.vectorActionDescriptions != rhs.vectorActionDescriptions {return false}
    if lhs.vectorActionSpaceType != rhs.vectorActionSpaceType {return false}
    if lhs.brainName != rhs.brainName {return false}
    if lhs.isTraining != rhs.isTraining {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
